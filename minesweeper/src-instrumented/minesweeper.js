/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['minesweeper.js']) {
  _$jscoverage['minesweeper.js'] = [];
  _$jscoverage['minesweeper.js'][1] = 0;
  _$jscoverage['minesweeper.js'][3] = 0;
  _$jscoverage['minesweeper.js'][4] = 0;
  _$jscoverage['minesweeper.js'][7] = 0;
  _$jscoverage['minesweeper.js'][8] = 0;
  _$jscoverage['minesweeper.js'][10] = 0;
  _$jscoverage['minesweeper.js'][15] = 0;
  _$jscoverage['minesweeper.js'][16] = 0;
  _$jscoverage['minesweeper.js'][17] = 0;
  _$jscoverage['minesweeper.js'][18] = 0;
  _$jscoverage['minesweeper.js'][19] = 0;
  _$jscoverage['minesweeper.js'][20] = 0;
  _$jscoverage['minesweeper.js'][21] = 0;
  _$jscoverage['minesweeper.js'][22] = 0;
  _$jscoverage['minesweeper.js'][26] = 0;
  _$jscoverage['minesweeper.js'][27] = 0;
  _$jscoverage['minesweeper.js'][28] = 0;
  _$jscoverage['minesweeper.js'][29] = 0;
  _$jscoverage['minesweeper.js'][30] = 0;
  _$jscoverage['minesweeper.js'][34] = 0;
  _$jscoverage['minesweeper.js'][37] = 0;
  _$jscoverage['minesweeper.js'][38] = 0;
  _$jscoverage['minesweeper.js'][39] = 0;
  _$jscoverage['minesweeper.js'][40] = 0;
  _$jscoverage['minesweeper.js'][41] = 0;
  _$jscoverage['minesweeper.js'][45] = 0;
  _$jscoverage['minesweeper.js'][48] = 0;
  _$jscoverage['minesweeper.js'][49] = 0;
  _$jscoverage['minesweeper.js'][51] = 0;
  _$jscoverage['minesweeper.js'][52] = 0;
  _$jscoverage['minesweeper.js'][54] = 0;
  _$jscoverage['minesweeper.js'][57] = 0;
  _$jscoverage['minesweeper.js'][58] = 0;
  _$jscoverage['minesweeper.js'][59] = 0;
  _$jscoverage['minesweeper.js'][60] = 0;
  _$jscoverage['minesweeper.js'][62] = 0;
  _$jscoverage['minesweeper.js'][66] = 0;
  _$jscoverage['minesweeper.js'][69] = 0;
  _$jscoverage['minesweeper.js'][70] = 0;
  _$jscoverage['minesweeper.js'][71] = 0;
  _$jscoverage['minesweeper.js'][72] = 0;
  _$jscoverage['minesweeper.js'][73] = 0;
  _$jscoverage['minesweeper.js'][74] = 0;
  _$jscoverage['minesweeper.js'][78] = 0;
  _$jscoverage['minesweeper.js'][82] = 0;
  _$jscoverage['minesweeper.js'][83] = 0;
  _$jscoverage['minesweeper.js'][84] = 0;
  _$jscoverage['minesweeper.js'][85] = 0;
  _$jscoverage['minesweeper.js'][87] = 0;
  _$jscoverage['minesweeper.js'][90] = 0;
  _$jscoverage['minesweeper.js'][91] = 0;
  _$jscoverage['minesweeper.js'][94] = 0;
  _$jscoverage['minesweeper.js'][95] = 0;
  _$jscoverage['minesweeper.js'][96] = 0;
  _$jscoverage['minesweeper.js'][97] = 0;
  _$jscoverage['minesweeper.js'][98] = 0;
  _$jscoverage['minesweeper.js'][99] = 0;
  _$jscoverage['minesweeper.js'][102] = 0;
  _$jscoverage['minesweeper.js'][105] = 0;
  _$jscoverage['minesweeper.js'][106] = 0;
  _$jscoverage['minesweeper.js'][107] = 0;
  _$jscoverage['minesweeper.js'][108] = 0;
  _$jscoverage['minesweeper.js'][109] = 0;
  _$jscoverage['minesweeper.js'][110] = 0;
  _$jscoverage['minesweeper.js'][114] = 0;
  _$jscoverage['minesweeper.js'][117] = 0;
  _$jscoverage['minesweeper.js'][118] = 0;
  _$jscoverage['minesweeper.js'][121] = 0;
  _$jscoverage['minesweeper.js'][122] = 0;
}
_$jscoverage['minesweeper.js'][1]++;
"use strict";
_$jscoverage['minesweeper.js'][3]++;
if (exports === undefined || exports === null) {
  _$jscoverage['minesweeper.js'][4]++;
  var exports = {};
}
_$jscoverage['minesweeper.js'][7]++;
exports.Minesweeper = (function () {
  _$jscoverage['minesweeper.js'][8]++;
  this.SIZE = 10;
  _$jscoverage['minesweeper.js'][10]++;
  var STATE = {EXPOSED: 0, FLAGGED: 1};
  _$jscoverage['minesweeper.js'][15]++;
  var boardState = new Array(this.SIZE);
  _$jscoverage['minesweeper.js'][16]++;
  var mined = new Array(this.SIZE);
  _$jscoverage['minesweeper.js'][17]++;
  for (var row = 0, col = 0; row < this.SIZE; ++row) {
    _$jscoverage['minesweeper.js'][18]++;
    boardState[row] = new Array(this.SIZE);
    _$jscoverage['minesweeper.js'][19]++;
    mined[row] = new Array(this.SIZE);
    _$jscoverage['minesweeper.js'][20]++;
    for (col = 0; col < this.SIZE; ++col) {
      _$jscoverage['minesweeper.js'][21]++;
      boardState[row][col] = "";
      _$jscoverage['minesweeper.js'][22]++;
      mined[row][col] = false;
}
}
  _$jscoverage['minesweeper.js'][26]++;
  this.isGameOver = (function () {
  _$jscoverage['minesweeper.js'][27]++;
  for (var i = 0; i < this.SIZE; i++) {
    _$jscoverage['minesweeper.js'][28]++;
    for (var j = 0; j < this.SIZE; j++) {
      _$jscoverage['minesweeper.js'][29]++;
      if (mined[i][j] && (boardState[i][j] === STATE.EXPOSED)) {
        _$jscoverage['minesweeper.js'][30]++;
        return true;
      }
}
}
  _$jscoverage['minesweeper.js'][34]++;
  return false;
});
  _$jscoverage['minesweeper.js'][37]++;
  this.isGameWon = (function () {
  _$jscoverage['minesweeper.js'][38]++;
  for (var i = 0; i < this.SIZE; i++) {
    _$jscoverage['minesweeper.js'][39]++;
    for (var j = 0; j < this.SIZE; j++) {
      _$jscoverage['minesweeper.js'][40]++;
      if ((mined[i][j] && boardState[i][j] !== STATE.FLAGGED) || (! mined[i][j] && (boardState[i][j] !== STATE.EXPOSED))) {
        _$jscoverage['minesweeper.js'][41]++;
        return false;
      }
}
}
  _$jscoverage['minesweeper.js'][45]++;
  return true;
});
  _$jscoverage['minesweeper.js'][48]++;
  this.exposeCell = (function (row, col) {
  _$jscoverage['minesweeper.js'][49]++;
  if (boardState[row][col] !== STATE.FLAGGED && boardState[row][col] !== STATE.EXPOSED && (row >= 0) && (col >= 0) && (row < this.SIZE) && (col < this.SIZE)) {
    _$jscoverage['minesweeper.js'][51]++;
    boardState[row][col] = STATE.EXPOSED;
    _$jscoverage['minesweeper.js'][52]++;
    return true;
  }
  _$jscoverage['minesweeper.js'][54]++;
  return false;
});
  _$jscoverage['minesweeper.js'][57]++;
  this.exposeAdjacentUnminedCells = (function (row, col) {
  _$jscoverage['minesweeper.js'][58]++;
  for (var i = row - 1; i <= row + 1; i++) {
    _$jscoverage['minesweeper.js'][59]++;
    for (var j = col - 1; j <= col + 1; j++) {
      _$jscoverage['minesweeper.js'][60]++;
      if ((i >= 0) && (j >= 0) && (i < this.SIZE) && (j < this.SIZE) && ! mined[i][j] && this.exposeCell(i, j) && (this.findNumAdjacentMines(i, j) === 0)) {
        _$jscoverage['minesweeper.js'][62]++;
        this.exposeAdjacentUnminedCells(i, j);
      }
}
}
  _$jscoverage['minesweeper.js'][66]++;
  return true;
});
  _$jscoverage['minesweeper.js'][69]++;
  this.findNumAdjacentMines = (function (row, col) {
  _$jscoverage['minesweeper.js'][70]++;
  var numMines = 0;
  _$jscoverage['minesweeper.js'][71]++;
  for (var i = row - 1; i <= row + 1; i++) {
    _$jscoverage['minesweeper.js'][72]++;
    for (var j = col - 1; j <= col + 1; j++) {
      _$jscoverage['minesweeper.js'][73]++;
      if ((i >= 0) && (j >= 0) && (i < this.SIZE) && (j < this.SIZE) && mined[i][j]) {
        _$jscoverage['minesweeper.js'][74]++;
        ++numMines;
      }
}
}
  _$jscoverage['minesweeper.js'][78]++;
  return numMines;
});
  _$jscoverage['minesweeper.js'][82]++;
  this.toggleFlagCell = (function (row, col) {
  _$jscoverage['minesweeper.js'][83]++;
  if ((row >= 0) && (col >= 0) && (row < this.SIZE) && (col < this.SIZE) && (boardState[row][col] !== STATE.EXPOSED)) {
    _$jscoverage['minesweeper.js'][84]++;
    boardState[row][col] === ""? boardState[row][col] = STATE.FLAGGED: boardState[row][col] = "";
    _$jscoverage['minesweeper.js'][85]++;
    return true;
  }
  _$jscoverage['minesweeper.js'][87]++;
  return false;
});
  _$jscoverage['minesweeper.js'][90]++;
  this.placeMine = (function (row, col) {
  _$jscoverage['minesweeper.js'][91]++;
  return mined[row][col]? false: mined[row][col] = true;
});
  _$jscoverage['minesweeper.js'][94]++;
  this.placeNumMines = (function (minesToPlace) {
  _$jscoverage['minesweeper.js'][95]++;
  for (var numMines = 0; numMines < minesToPlace; numMines++) {
    _$jscoverage['minesweeper.js'][96]++;
    var row = Math.floor(Math.random() * this.SIZE);
    _$jscoverage['minesweeper.js'][97]++;
    var col = Math.floor(Math.random() * this.SIZE);
    _$jscoverage['minesweeper.js'][98]++;
    if (! this.placeMine(row, col)) {
      _$jscoverage['minesweeper.js'][99]++;
      numMines--;
    }
}
  _$jscoverage['minesweeper.js'][102]++;
  return numMines;
});
  _$jscoverage['minesweeper.js'][105]++;
  this.getScore = (function () {
  _$jscoverage['minesweeper.js'][106]++;
  var score = 0;
  _$jscoverage['minesweeper.js'][107]++;
  for (var i = 0; i < this.SIZE; i++) {
    _$jscoverage['minesweeper.js'][108]++;
    for (var j = 0; j < this.SIZE; j++) {
      _$jscoverage['minesweeper.js'][109]++;
      if (! this.isGameOver() && (boardState[i][j] === STATE.EXPOSED)) {
        _$jscoverage['minesweeper.js'][110]++;
        score++;
      }
}
}
  _$jscoverage['minesweeper.js'][114]++;
  return score;
});
  _$jscoverage['minesweeper.js'][117]++;
  this.getBoardState = (function () {
  _$jscoverage['minesweeper.js'][118]++;
  return boardState;
});
  _$jscoverage['minesweeper.js'][121]++;
  this.getMinedPositions = (function () {
  _$jscoverage['minesweeper.js'][122]++;
  return mined;
});
});
_$jscoverage['minesweeper.js'].source = ["\"use strict\";","","if(exports === undefined || exports === null) {","  var exports = {};","}","","exports.Minesweeper = function() {","  this.SIZE = 10;","","  var STATE = {","    EXPOSED  : 0,","    FLAGGED  : 1","  };","","  var boardState = new Array(this.SIZE);","  var mined = new Array(this.SIZE);","  for (var row = 0, col = 0; row &lt; this.SIZE; ++row) {","    boardState[row] = new Array(this.SIZE);","    mined[row] = new Array(this.SIZE);","    for(col = 0; col &lt; this.SIZE; ++col) {","      boardState[row][col] = \"\";","      mined[row][col] = false;","    }","  }","","  this.isGameOver = function () {","    for (var i = 0; i &lt; this.SIZE; i++) {","      for (var j = 0; j &lt; this.SIZE; j++) {","        if(mined[i][j] &amp;&amp; (boardState[i][j] === STATE.EXPOSED)) {","          return true;","        }","      }","    }","    return false;","  };","","  this.isGameWon = function () {","    for (var i = 0; i &lt; this.SIZE; i++) {","      for (var j = 0; j &lt; this.SIZE; j++) {","        if((mined[i][j] &amp;&amp; boardState[i][j] !== STATE.FLAGGED) || (!mined[i][j] &amp;&amp; (boardState[i][j] !== STATE.EXPOSED))) {","          return false;","        }","      }","    }","    return true;","  };","","  this.exposeCell = function (row, col) {","    if(boardState[row][col] !== STATE.FLAGGED &amp;&amp; boardState[row][col] !== STATE.EXPOSED &amp;&amp;","        (row &gt;= 0) &amp;&amp; (col &gt;= 0) &amp;&amp; (row &lt; this.SIZE) &amp;&amp; (col &lt; this.SIZE)) {","      boardState[row][col] = STATE.EXPOSED;","      return true;","    }","    return false;","  };","","  this.exposeAdjacentUnminedCells = function (row, col) {","    for (var i = row - 1; i &lt;= row+1; i++) {","      for (var j = col - 1; j &lt;= col+1; j++) {","        if((i &gt;= 0) &amp;&amp; (j &gt;= 0) &amp;&amp; (i &lt; this.SIZE) &amp;&amp; (j &lt; this.SIZE) &amp;&amp; !mined[i][j] &amp;&amp; this.exposeCell(i, j) &amp;&amp;","           (this.findNumAdjacentMines(i,j) === 0)) {","          this.exposeAdjacentUnminedCells(i, j);","        }","      }","    }","    return true;","  };","","  this.findNumAdjacentMines = function (row, col) {","    var numMines = 0;","    for (var i = row - 1; i &lt;= row+1; i++) {","      for (var j = col - 1; j &lt;= col+1; j++) {","        if((i &gt;= 0) &amp;&amp; (j &gt;= 0) &amp;&amp; (i &lt; this.SIZE) &amp;&amp; (j &lt; this.SIZE) &amp;&amp; mined[i][j]) {","          ++numMines;","        }","      }","    }","    return numMines;","  };","","","  this.toggleFlagCell = function (row, col) {","    if((row &gt;= 0) &amp;&amp; (col &gt;= 0) &amp;&amp; (row &lt; this.SIZE) &amp;&amp;(col &lt; this.SIZE) &amp;&amp; (boardState[row][col] !== STATE.EXPOSED)) {","      boardState[row][col] === \"\" ? boardState[row][col] = STATE.FLAGGED : boardState[row][col] = \"\";","      return true;","    }","    return false;","  };","","  this.placeMine = function (row, col) {","    return mined[row][col] ? false : mined[row][col] = true;","  };","","  this.placeNumMines = function (minesToPlace) {","    for(var numMines = 0; numMines &lt; minesToPlace; numMines++) {","      var row = Math.floor(Math.random() * this.SIZE);","      var col = Math.floor(Math.random() * this.SIZE);","      if(!this.placeMine(row, col)) {","        numMines--;","      }","    }","    return numMines;","  };","","  this.getScore = function () {","    var score = 0;","    for (var i = 0; i &lt; this.SIZE; i++) {","      for (var j = 0; j &lt; this.SIZE; j++) {","        if(!this.isGameOver() &amp;&amp; (boardState[i][j] === STATE.EXPOSED)) {","          score++;","        }","      }","    }","    return score;","  };","","  this.getBoardState = function () {","    return boardState;","  };","","  this.getMinedPositions = function () {","    return mined;","  };","};"];
